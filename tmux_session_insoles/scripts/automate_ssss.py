#!/bin/env python3
import os
import subprocess
import time
import timeout_decorator
import glob
import time
import shutil

USE_TIMEOUT=True
#USE_TIMEOUT=False

timeout_time = 40
#timeout_time = 80

sample_notebook="standard_analysis.ipynb"
# Define a list of parameter tuples
# INSOLE FILE, IK FILE
common_path ='/catkin_ws/Data/ruoli/ViconData/Ruoli/Moticon_insole/RealTimekIDS2' 
#ik_list = glob.glob("%s/*balance*_ik_lower.sto"%common_path)
#ik_list.sort()
#insole_list = glob.glob("%s/balance*_header_corrected.txt"%common_path)
#insole_list.sort()
#parameter_tuples = []

#for insole_file. ik_file in zip(insole_list, ik_list):
#    parameter_tuples.append((insole_file. ik_file))
fff = [
 "2023-03-03-12-13-11ssss0113_ik_lower.sto",
 "2023-03-03-12-18-22ssss0214_ik_lower.sto",
]
parameter_tuples = [
    ('%s/ssss01_header_corrected.txt'%common_path, '%s/%s'%(common_path,fff[0]),"02"),
    ('%s/ssss02_header_corrected.txt'%common_path, '%s/%s'%(common_path,fff[1]),"02"),
    #('value1b', 'value2b'),
]
insole_start = [1677845591.588027,
                1677845902.331027]
ik_start = [    (1677845591, 588027000),
                (1677845902, 347958087)]
clock_start = [ (1677845590, 0),
                (1677845901, 0)]

action="ssss"

id_launcher="id_async_filtered.launch"
#id_launcher="id_async_filtered_calcn_references.launch"

def cleanup_subprocesses():
    subprocess.run(["tmux", "kill-session"])
    time.sleep(3)
# Path to your bash script
bash_script_path = 'GENERATE_ID_CURVE_SCRIPT.bash'



# Loop through the parameter tuples and run the subprocess
for i, (insole_file, ik_file, subjectnum) in enumerate(parameter_tuples):
    print(i, insole_file, ik_file)
    command = ['/opt/ros/noetic/bin/rosrun', 'tmux_session_insoles', bash_script_path, insole_file, ik_file, str(i), subjectnum, action, id_launcher, 
            str(insole_start[i]), 
            str(ik_start[i][0]), 
            str(ik_start[i][1]), 
            str(clock_start[i][0]), 
            str(clock_start[i][1]),
            str(timeout_time)
            ]

    try:
        # Use timeout_decorator.timeout to enforce timeout
        @timeout_decorator.timeout(timeout_time)  # N seconds timeout
        def run_subprocess():
            subprocess.run(command, check=True)

        if USE_TIMEOUT:
            run_subprocess()
        else:
            if i in [1]: ## put the trials you want to check manually here and set USE_TIMEOUT to False
                subprocess.run(command, check=True)
        #print("Bash script executed successfully!")
    except subprocess.CalledProcessError as e:
        print(f"Error: {e}")
    except timeout_decorator.TimeoutError:
        print("Bash script execution timed out.")
        cleanup_subprocesses()



source_directory="/tmp/02"

for bag_file in glob.glob(source_directory+"/*.bag"):
    p = subprocess.Popen(["rostopic","echo","-b", bag_file,"-p","/id_node/output"], stdout=subprocess.PIPE) #> timings.txt])
    out, err = p.communicate()
    with open(bag_file+"_timings.txt", 'wb') as timings:
        timings.write(out)

base_directory = '/catkin_ws/tmp/02/'
new_directory_name = 'test_%s'%action
counter = 1

while True:
    directory_name = f"{new_directory_name}_{counter}"
    directory_path = os.path.join(base_directory, directory_name)
    
    if not os.path.exists(directory_path):
        os.makedirs(directory_path)
        break
    
    counter += 1

print(directory_path)
#copy sample analysis notebook

shutil.copy(sample_notebook,os.path.join(directory_path, "%s_analysis.ipynb"%action))

#copy trials generated by this script to new folder we just created

# Loop through files in the source directory and move them to the destination.
for filename in os.listdir(source_directory):
    source_file = os.path.join(source_directory, filename)
    destination_file = os.path.join(directory_path, filename)
    shutil.move(source_file, destination_file)

